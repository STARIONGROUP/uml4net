// -------------------------------------------------------------------------------------------------
// <copyright file="{{this.Name}}Reader.cs" company="Starion Group S.A.">
//
//   Copyright (C) 2019-2024 Starion Group S.A.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// </copyright>
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------

namespace uml4net.xmi.Readers.{{this.Namespace.Name}}
{
    using System;
    using System.Collections.Generic;
    using System.Xml;

    using Microsoft.Extensions.Logging;

    using uml4net;
    using uml4net.Classification;
    using uml4net.CommonBehavior;
    using uml4net.CommonStructure;
    using uml4net.Packages;
    using uml4net.SimpleClassifiers;
    using uml4net.StructuredClassifiers;
    using uml4net.UseCases;
    using uml4net.Utils;
    using uml4net.Values;
    using uml4net.xmi.Cache;
    using uml4net.xmi.Readers;

    /// <summary>
    /// The purpose of the <see cref="{{this.Name}}Reader"/> is to read an instance of <see cref="I{{this.Name}}"/>
    /// from the XMI document
    /// </summary>
    public class {{this.Name}}Reader : XmiElementReader<I{{this.Name}}>, IXmiElementReader<I{{this.Name}}>
    {
        {{ #each (Class.QueryAllContainedNonDerivedNonRedefinedProperties this) as | property | }}
        /// <summary>
        /// Gets the INJECTED <see cref="IXmiElementReader{T}"/> of <see cref="I{{#Property.WriteTypeName property}}"/> to read
        /// the <see cref="I{{../Name}}.{{ #String.CapitalizeFirstLetter property.Name }}"/> property.
        /// </summary>
        public IXmiElementReader<I{{#Property.WriteTypeName property}}> {{ #String.CapitalizeFirstLetter property.Name }}Reader { get; set; }

        {{/each}}

        /// <summary>
        /// Initializes a new instance of the <see cref="{{this.Name}}Reader"/> class.
        /// </summary>
        /// <param name="cache">
        /// The cache in which each <see cref="IXmiElement"/>> is stored
        /// </param>
        /// <param name="logger">
        /// The (injected) <see cref="ILogger{T}"/> used to set up logging
        /// </param>
        public {{this.Name}}Reader(IXmiReaderCache cache, ILogger<{{this.Name}}Reader> logger)
            : base(cache, logger)
        {
        }

        /// <summary>
        /// Reads the <see cref="I{{this.Name}}"/> object from its XML representation
        /// </summary>
        /// <param name="xmlReader">
        /// an instance of <see cref="XmlReader"/>
        /// </param>
        /// <returns>
        /// an instance of <see cref="I{{this.Name}}"/>
        /// </returns>
        public override I{{this.Name}} Read(XmlReader xmlReader)
        {
            if (xmlReader == null)
            {
                throw new ArgumentNullException(nameof(xmlReader));
            }

            I{{this.Name}} poco = new {{this.Name}}();

            if (xmlReader.MoveToContent() == XmlNodeType.Element)
            {
                var xmiType = xmlReader.GetAttribute("xmi:type");

                if (!string.IsNullOrEmpty(xmiType) && xmiType != "uml:{{this.Name}}")
                {
                    throw new XmlException($"The XmiType should be 'uml:{{this.Name}}' while it is {xmiType}");
                }
                else
                {
                    xmiType = "uml:{{this.Name}}";
                }

                poco.XmiType = xmiType;

                poco.XmiId = xmlReader.GetAttribute("xmi:id");

                this.Cache.Add(poco.XmiId, poco);

                {{ #each (Class.QueryAllNonDerivedNonReadOnlyProperties this) as | property | }}
                {{ #Property.WriteXmlAttributeForXmiReader property ../ }}
                {{/each}}

                {{ #each (Class.QueryAllNonDerivedNonReadOnlyNonContainedReferenceEnumerableProperties this) as | property | }}
                    var {{ property.Name }}s = new List<string>();
                {{/each}}

                while (xmlReader.Read())
                {
                    if (xmlReader.NodeType == XmlNodeType.Element)
                    {
                        switch (xmlReader.LocalName)
                        {
                            {{ #each (Class.QueryAllNonDerivedNonReadOnlyProperties this) as | property | }}
                            {{ #Property.WriteXmlElementForXmiReader property ../ }}
                            {{/each}}
                            default:
                                var defaultLineInfo = xmlReader as IXmlLineInfo;
                                throw new NotSupportedException($"{{this.Name}}Reader: {xmlReader.LocalName} at line:position {defaultLineInfo.LineNumber}:{defaultLineInfo.LinePosition}");
                        }
                    }
                }

                {{ #each (Class.QueryAllNonDerivedNonReadOnlyNonContainedReferenceEnumerableProperties this) as | property | }}
                    if ({{ property.Name }}s.Count > 0)
                    {
                        poco.MultiValueReferencePropertyIdentifiers.Add("{{ property.Name }}", {{ property.Name }}s);
                    }

                {{/each}}
            }

            return poco;
        }
    }
}

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------
