// -------------------------------------------------------------------------------------------------
//  <copyright file="XlReportGenerator.cs" company="Starion Group S.A.">
// 
//    Copyright (C) 2019-2025 Starion Group S.A.
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, softwareUseCases
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
// 
//  </copyright>
//  ------------------------------------------------------------------------------------------------

namespace uml4net.Reporting.Generators
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Diagnostics;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Reflection;

    using ClosedXML.Excel;

    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.Logging.Abstractions;

    using uml4net.Classification;
    using uml4net.CommonStructure;
    using uml4net.Extensions;
    using uml4net.SimpleClassifiers;
    using uml4net.StructuredClassifiers;
    using uml4net.Packages;

    /// <summary>
    /// The purpose of the <see cref="XlReportGenerator"/> is to generate reports of a
    /// UML Model
    /// </summary>
    public class XlReportGenerator : ReportGenerator, IXlReportGenerator
    {
        /// <summary>
        /// The <see cref="ILogger"/> used to log
        /// </summary>
        private readonly ILogger<XlReportGenerator> logger;

        /// <summary>
        /// Initializes a new instance of the <see cref="XlReportGenerator"/> class.
        /// </summary>
        /// <param name="loggerFactory">
        /// The (injected) <see cref="ILoggerFactory"/> used to set up logging
        /// </param>
        public XlReportGenerator(ILoggerFactory loggerFactory = null) : base(loggerFactory)
        {
            this.logger = loggerFactory == null ? NullLogger<XlReportGenerator>.Instance : loggerFactory.CreateLogger<XlReportGenerator>();
        }

        /// <summary>
        /// Queries the name of the report type that is generated by the current <see cref="IReportGenerator"/>
        /// </summary>
        /// <returns>
        /// human-readable name of the report type
        /// </returns>
        public string QueryReportType()
        {
            return "Excel";
        }

        /// <summary>
        /// Generates a table that contains all classes, attributes and their documentation
        /// </summary>
        /// <param name="modelPath">
        /// the path to the UML model of which the report is to be generated.
        /// </param>
        /// <param name="rootDirectory">
        /// The base directory path used as the local root for resolving referenced XMI files.
        /// </param>
        /// <param name="useStrictReading">
        /// A value indicating whether to use strict reading. When Strict Reading is set to true the
        /// reader will throw an exception if it encounters an unknown element or attribute.
        /// Otherwise, it will ignore the unknown element or attribute and log a warning.
        /// </param>
        /// <param name="pathMap">
        /// a dictionary of key-value pairs used to map PATHMAP references to local xmi files
        /// </param>
        /// <param name="outputPath">
        /// the path, including filename, where the output is to be generated.
        /// </param>
        public void GenerateReport(FileInfo modelPath, DirectoryInfo rootDirectory, bool useStrictReading, Dictionary<string, string> pathMap, FileInfo outputPath)
        {
            if (modelPath == null)
            {
                throw new ArgumentNullException(nameof(modelPath));
            }

            if (rootDirectory == null)
            {
                throw new ArgumentNullException(nameof(rootDirectory));
            }

            if (outputPath == null)
            {
                throw new ArgumentNullException(nameof(outputPath));
            }

            var sw = Stopwatch.StartNew();

            this.logger.LogInformation("Start Generating Excel report tables");

            var xmiReaderResult = this.LoadPackages(modelPath, rootDirectory, useStrictReading, pathMap);

            var packages = xmiReaderResult.Root.QueryPackages().ToList();
            packages.AddRange(xmiReaderResult.Packages);

            packages = packages.Distinct().ToList();

            using (var workbook = new XLWorkbook())
            {
                this.AddInfoSheet(workbook, xmiReaderResult.Root);

                this.AddIClassSheet(workbook, packages);

                this.AddIInterfaceSheet(workbook, packages);

                this.AddIEnumerationSheet(workbook, packages);

                this.AddIPrimitiveTypeSheet(workbook, packages);

                this.AddOtherIDataTypeSheet(workbook, packages);

                this.logger.LogInformation("Saving report file to {0}", outputPath.FullName);

                workbook.SaveAs(outputPath.FullName);
            }

            this.logger.LogInformation("Generated Excel report tables in {0} [ms]", sw.ElapsedMilliseconds);
        }

        /// <summary>
        /// Adds a worksheet that contains information about the model and generator
        /// </summary>
        /// <param name="workbook">
        /// The target <see cref="XLWorkbook"/> to which the info worksheet is added
        /// </param>
        /// <param name="rootPackage">
        /// The root <see cref="IPackage"/>
        /// </param>
        private void AddInfoSheet(XLWorkbook workbook, IPackage rootPackage)
        {
            this.logger.LogDebug("Add info sheet");

            var infoWorksheet = workbook.Worksheets.Add("Model Info");

            infoWorksheet.Cell(1, 1).Value = "uml4net.Reporting Version";
            infoWorksheet.Cell(1, 2).Value = Assembly.GetExecutingAssembly().GetName().Version?.ToString();

            infoWorksheet.Cell(2, 1).Value = "Generation Date";
            infoWorksheet.Cell(2, 2).Value = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);

            infoWorksheet.Cell(3, 1).Value = "Root Package - name";
            infoWorksheet.Cell(3, 2).Value = rootPackage.Name;

            this.FormatSheet(infoWorksheet);
        }

        /// <summary>
        /// Adds a worksheet to the workbook with Class data
        /// </summary>
        /// <param name="workbook">
        /// The target <see cref="XLWorkbook"/> to which the Class worksheet is added
        /// </param>
        /// <param name="packages">
        /// The <see cref="IPackage"/>s that contain the Class instances to report on
        /// </param>
        private void AddIClassSheet(XLWorkbook workbook, IEnumerable<IPackage> packages)
        {
            this.logger.LogDebug("Add IClass report");

            var classWorksheet = workbook.Worksheets.Add("Class");

            var dataTable = new DataTable();
            dataTable.Locale = CultureInfo.InvariantCulture;

            dataTable.Columns.Add("Class", typeof(string));
            dataTable.Columns.Add("Qualified Name", typeof(string));
            dataTable.Columns.Add("IsAbstract", typeof(string));
            dataTable.Columns.Add("Generalizations", typeof(string));
            dataTable.Columns.Add("Property", typeof(string));
            dataTable.Columns.Add("Type", typeof(string));
            dataTable.Columns.Add("Multiplicity", typeof(string));
            dataTable.Columns.Add("IsContainment", typeof(string));
            dataTable.Columns.Add("Documentation", typeof(string));
            dataTable.Columns.Add("Inheritance", typeof(string));

            foreach (var package in packages)
            {
                foreach (var @class in package.PackagedElement.OfType<IClass>().OrderBy(x => x.Name))
                {
                    var classDataRow = dataTable.NewRow();
                    classDataRow["Class"] = @class.Name;
                    classDataRow["Qualified Name"] = @class.QualifiedName;
                    classDataRow["IsAbstract"] = @class.IsAbstract.ToString(CultureInfo.InvariantCulture);
                    classDataRow["Generalizations"] = string.Join(", ", @class.SuperClass.Select(o => o.Name)) ;
                    classDataRow["Property"] = "--";
                    classDataRow["Type"] = "--";
                    classDataRow["Multiplicity"] = "--";
                    classDataRow["IsContainment"] = "--";
                    classDataRow["Documentation"] = @class.QueryRawDocumentation();
                    classDataRow["Inheritance"] = "--";
                    dataTable.Rows.Add(classDataRow);

                    foreach (var property in @class.QueryAllProperties())
                    {
                        if (property.IsDerived || property.IsDerivedUnion || property.IsReadOnly)
                        {
                            continue;
                        }

                        var propertyDataRow = dataTable.NewRow();
                        propertyDataRow["Class"] = @class.Name;
                        propertyDataRow["Property"] = property.Name;
                        propertyDataRow["Type"] = property.QueryTypeName();
                        propertyDataRow["Multiplicity"] = $"[{property.Lower}..{property.Upper}]";
                        propertyDataRow["IsContainment"] = property.IsComposite.ToString(CultureInfo.InvariantCulture);
                        propertyDataRow["Documentation"] = property.QueryRawDocumentation();
                        propertyDataRow["Inheritance"] = ((INamedElement)property.Owner).Name;
                        dataTable.Rows.Add(propertyDataRow);
                    }
                }
            }

            classWorksheet.Cell(1, 1).InsertTable(dataTable, "Classes", true);

            this.FormatSheet(classWorksheet);
        }

        /// <summary>
        /// Adds a worksheet to the workbook with Interface data
        /// </summary>
        /// <param name="workbook">
        /// The target <see cref="XLWorkbook"/> to which the Interface worksheet is added
        /// </param>
        /// <param name="packages">
        /// The <see cref="IPackage"/>s that contain the Interface instances to report on
        /// </param>
        private void AddIInterfaceSheet(XLWorkbook workbook, IEnumerable<IPackage> packages)
        {
            this.logger.LogDebug("Add IInterface report");

            var interfaceWorksheet = workbook.Worksheets.Add("Interface");

            var dataTable = new DataTable();
            dataTable.Locale = CultureInfo.InvariantCulture;

            dataTable.Columns.Add("Interface", typeof(string));
            dataTable.Columns.Add("Qualified Name", typeof(string));
            dataTable.Columns.Add("Generalizations", typeof(string));
            dataTable.Columns.Add("Property", typeof(string));
            dataTable.Columns.Add("Type", typeof(string));
            dataTable.Columns.Add("Multiplicity", typeof(string));
            dataTable.Columns.Add("IsContainment", typeof(string));
            dataTable.Columns.Add("Documentation", typeof(string));

            foreach (var package in packages)
            {
                foreach (var @interface in package.PackagedElement.OfType<IInterface>().OrderBy(x => x.Name))
                {
                    var classDataRow = dataTable.NewRow();
                    classDataRow["Class"] = @interface.Name;
                    classDataRow["Qualified Name"] = @interface.QualifiedName;
                    classDataRow["IsAbstract"] = @interface.IsAbstract.ToString(CultureInfo.InvariantCulture);
                    classDataRow["Generalizations"] = string.Join(", ", @interface.QueryGeneral().Select(o => o.Name));
                    classDataRow["Property"] = "--";
                    classDataRow["Type"] = "--";
                    classDataRow["Multiplicity"] = "--";
                    classDataRow["IsContainment"] = "--";
                    classDataRow["Documentation"] = @interface.QueryRawDocumentation();
                    dataTable.Rows.Add(classDataRow);

                    foreach (var property in @interface.OwnedAttribute)
                    {
                        if (property.IsDerived || property.IsDerivedUnion || property.IsReadOnly)
                        {
                            continue;
                        }

                        var propertyDataRow = dataTable.NewRow();
                        propertyDataRow["Class"] = @interface.Name;
                        propertyDataRow["Property"] = property.Name;
                        propertyDataRow["Type"] = property.QueryTypeName();
                        propertyDataRow["Multiplicity"] = $"[{property.Lower}..{property.Upper}]";
                        propertyDataRow["IsContainment"] = property.IsComposite.ToString(CultureInfo.InvariantCulture);
                        propertyDataRow["Documentation"] = property.QueryRawDocumentation();
                        dataTable.Rows.Add(propertyDataRow);
                    }
                }
            }

            interfaceWorksheet.Cell(1, 1).InsertTable(dataTable, "Interfaces", true);

            this.FormatSheet(interfaceWorksheet);
        }

        /// <summary>
        /// Adds a worksheet to the workbook with IEnumeration data
        /// </summary>
        /// <param name="workbook">
        /// The target <see cref="XLWorkbook"/> to which the IEnumeration worksheet is added
        /// </param>
        /// <param name="packages">
        /// The <see cref="IPackage"/>s that contain the IEnumeration instances to report on
        /// </param>
        private void AddIEnumerationSheet(XLWorkbook workbook, IEnumerable<IPackage> packages)
        {
            var enumerationWorksheet = workbook.Worksheets.Add("Enumeration");

            this.logger.LogDebug("Add IEnumeration report");

            var dataTable = new DataTable();
            dataTable.Locale = CultureInfo.InvariantCulture;

            dataTable.Columns.Add("Enumeration", typeof(string));
            dataTable.Columns.Add("Qualified Name", typeof(string));
            dataTable.Columns.Add("EnumerationLiteral", typeof(string));
            dataTable.Columns.Add("Documentation", typeof(string));

            foreach (var package in packages)
            {
                foreach (var enumeration in package.PackagedElement.OfType<IEnumeration>().OrderBy(x => x.Name))
                {
                    var enumerationDataRow = dataTable.NewRow();
                    enumerationDataRow["Enumeration"] = enumeration.Name;
                    enumerationDataRow["Qualified Name"] = enumeration.QualifiedName;
                    enumerationDataRow["EnumerationLiteral"] = "--";
                    enumerationDataRow["Documentation"] = enumeration.QueryRawDocumentation();
                    dataTable.Rows.Add(enumerationDataRow);

                    foreach (var enumerationLiteral in enumeration.OwnedLiteral)
                    {
                        var enumerationLiteralDataRow = dataTable.NewRow();
                        enumerationLiteralDataRow["Enumeration"] = enumeration.Name;
                        enumerationLiteralDataRow["EnumerationLiteral"] = enumerationLiteral.Name;
                        enumerationLiteralDataRow["Documentation"] = enumerationLiteral.QueryRawDocumentation();
                        dataTable.Rows.Add(enumerationLiteralDataRow);
                    }
                }
            }

            enumerationWorksheet.Cell(1, 1).InsertTable(dataTable, "Enumerations", true);

            this.FormatSheet(enumerationWorksheet);
        }

        /// <summary>
        /// Adds a worksheet to the workbook with IPrimitiveType data
        /// </summary>
        /// <param name="workbook">
        /// The target <see cref="XLWorkbook"/> to which the IPrimitiveType worksheet is added
        /// </param>
        /// <param name="packages">
        /// The <see cref="IPackage"/>s that contain the IPrimitiveType instances to report on
        /// </param>
        private void AddIPrimitiveTypeSheet(XLWorkbook workbook, IEnumerable<IPackage> packages)
        {
            var primitiveTypeWorksheet = workbook.Worksheets.Add("PrimitiveType");

            this.logger.LogDebug("Add IPrimitiveType report");

            var dataTable = new DataTable();
            dataTable.Locale = CultureInfo.InvariantCulture;

            dataTable.Columns.Add("PrimitiveType", typeof(string));
            dataTable.Columns.Add("Documentation", typeof(string));

            foreach (var package in packages)
            {
                foreach (var primitiveType in package.PackagedElement
                             .OfType<IPrimitiveType>()
                             .OrderBy(x => x.Name))
                {
                    var dataTypeRow = dataTable.NewRow();
                    dataTypeRow["PrimitiveType"] = primitiveType.Name;
                    dataTypeRow["Documentation"] = primitiveType.QueryRawDocumentation();
                    dataTable.Rows.Add(dataTypeRow);
                }
            }

            primitiveTypeWorksheet.Cell(1, 1).InsertTable(dataTable, "PrimitiveTypes", true);

            this.FormatSheet(primitiveTypeWorksheet);
        }

        /// <summary>
        /// Adds a worksheet to the workbook with IDataType data (except for IEnumerations and PrimitiveTypes)
        /// </summary>
        /// <param name="workbook">
        /// The target <see cref="XLWorkbook"/> to which the IDataType worksheet is added
        /// </param>
        /// <param name="packages">
        /// The <see cref="IPackage"/>s that contain the IDataType instances to report on
        /// </param>
        private void AddOtherIDataTypeSheet(XLWorkbook workbook, IEnumerable<IPackage> packages)
        {
            var dataTypeWorksheet = workbook.Worksheets.Add("DataType");

            this.logger.LogDebug("Add IDataType report");

            var dataTable = new DataTable();
            dataTable.Locale = CultureInfo.InvariantCulture;

            dataTable.Columns.Add("DataType", typeof(string));
            dataTable.Columns.Add("Documentation", typeof(string));

            foreach (var package in packages)
            {
                foreach (var eDataType in package.PackagedElement
                             .OfType<IDataType>()
                             .Where(x => x is not IEnumeration && x is not IPrimitiveType)
                             .OrderBy(x => x.Name))
                {
                    var dataTypeRow = dataTable.NewRow();
                    dataTypeRow["DataType"] = eDataType.Name;
                    dataTypeRow["Documentation"] = eDataType.QueryRawDocumentation();
                    dataTable.Rows.Add(dataTypeRow);
                }
            }

            dataTypeWorksheet.Cell(1, 1).InsertTable(dataTable, "DataTypes", true);

            this.FormatSheet(dataTypeWorksheet);
        }

        /// <summary>
        /// Format the provided sheet
        /// </summary>
        /// <param name="worksheet">
        /// The <see cref="IXLWorksheet"/> that is to be formatted
        /// </param>
        private void FormatSheet(IXLWorksheet worksheet)
        {
            try
            {
                worksheet.Rows().AdjustToContents();
                worksheet.Columns().AdjustToContents();
            }
            catch (Exception e)
            {
                this.logger.LogError(e, "Problem loading fonts when adjusting to contents");
            }
        }

        /// <summary>
        /// Verifies whether the extension of the <paramref name="outputPath"/> is valid or not
        /// </summary>
        /// <param name="outputPath">
        /// The subject <see cref="FileInfo"/> to check
        /// </param>
        /// <returns>
        /// A Tuple of bool and string, where the string contains a description of the verification.
        /// Either stating that the extension is valid or not.
        /// </returns>
        public override Tuple<bool, string> IsValidReportExtension(FileInfo outputPath)
        {
            if (outputPath == null)
            {
                throw new ArgumentNullException(nameof(outputPath));
            }

            switch (outputPath.Extension)
            {
                case ".xlsm":
                    return new Tuple<bool, string>(true, ".xlsm is a supported report extension");
                case ".xltm":
                    return new Tuple<bool, string>(true, ".xltm is a supported report extension");
                case ".xlsx":
                    return new Tuple<bool, string>(true, ".xlsx is a supported report extension");
                case ".xltx":
                    return new Tuple<bool, string>(true, ".xltx is a supported report extension");
                default:
                    return new Tuple<bool, string>(false, $"The Extension of the output file '{outputPath.Extension}' is not supported. Supported extensions are '.xlsx', '.xlsm', '.xltx' and '.xltm'");
            }
        }
    }
}
