// -------------------------------------------------------------------------------------------------
// <copyright file="ModelInspector.cs" company="Starion Group S.A.">
//
//   Copyright (C) 2019-2025 Starion Group S.A.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// </copyright>
// ------------------------------------------------------------------------------------------------

namespace uml4net.Reporting.Generators
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Text;

    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.Logging.Abstractions;

    using uml4net.Classification;
    using uml4net.CommonStructure;
    using uml4net.Extensions;
    using uml4net.Packages;
    using uml4net.StructuredClassifiers;

    /// <summary>
    /// The purpose of the <see cref="ModelInspector"/> is to iterate through the model and report on the various kinds of
    /// patters that exist in the UML model that need to be taken into account for code-generation
    /// </summary>
    public class ModelInspector : ReportGenerator, IModelInspector
    {
        /// <summary>
        /// The <see cref="ILogger"/> used to log
        /// </summary>
        private readonly ILogger<ModelInspector> logger;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelInspector"/> class.
        /// </summary>
        /// <param name="loggerFactory">
        /// The (injected) <see cref="ILoggerFactory"/> used to set up logging
        /// </param>
        public ModelInspector(ILoggerFactory loggerFactory = null) : base(loggerFactory)
        {
            this.logger = loggerFactory == null ? NullLogger<ModelInspector>.Instance : loggerFactory.CreateLogger<ModelInspector>();
        }

        /// <summary>
        /// Queries the name of the report type that is generated by the current <see cref="IReportGenerator"/>
        /// </summary>
        /// <returns>
        /// human-readable name of the report type
        /// </returns>
        public string QueryReportType()
        {
            return "inspection";
        }

        /// <summary>
        /// Inspect the content of the provided <see cref="IPackage"/> and returns the variation 
        /// of data-types, enumerations and multiplicity as an Analysis report
        /// </summary>
        /// <param name="package">
        /// The <see cref="IPackage"/> that needs to be inspected
        /// </param>
        /// <returns>
        /// Returns a report of the classes of interest in the provided package 
        /// </returns>
        public string Inspect(IPackage package)
        {
            if (package == null)
            {
                throw new ArgumentNullException(nameof(package));
            }

            // Step 1: Map class to property variations
            var classPropertyVariations = this.MapClassPropertyVariation(package);

            // Step 2: Greedy algorithm to cover all property variations with the fewest classes
            var result = this.ReduceClassPropertyVariationToInterestingClasses(classPropertyVariations);

            var sb = new StringBuilder();

            sb.AppendLine($"----- PACKAGE {package.Name} ANALYSIS ------");
            sb.AppendLine("");

            sb.AppendLine("");
            sb.AppendLine("----- MULTIPLICITY RESULTS ------");
            sb.AppendLine("");

            var uniqueAndOrderedPropertyVariations = new HashSet<string>(classPropertyVariations.Values.SelectMany(p => p).ToList())
                .OrderBy(x => x).ToList();

            foreach (var orderedPropertyVariation in uniqueAndOrderedPropertyVariations)
            {
                sb.AppendLine(orderedPropertyVariation);
            }

            sb.AppendLine("");
            sb.AppendLine("----- INTERESTING CLASSES ------");
            sb.AppendLine("");

            var orderedClasses = result.OrderBy(x => x.Name).ToList();

            foreach (var @class in orderedClasses)
            {
                var isAbstract = "";
                if (@class.IsAbstract)
                {
                    isAbstract = " [Abstract]";
                }

                sb.AppendLine($"class : {@class.QualifiedName}{isAbstract}");
            }

            return sb.ToString();
        }

        /// <summary>
        /// Map class to property variations
        /// </summary>
        /// <param name="package">
        /// The <see cref="IPackage"/> that needs to be inspected
        /// </param>
        /// <returns>
        /// a Dictionary of <see cref="IClass"/> and associated <see cref="HashSet{T}"/> of property
        /// variations for that class
        /// </returns>
        private Dictionary<IClass, HashSet<string>> MapClassPropertyVariation(IPackage package)
        {
            var classPropertyVariations = new Dictionary<IClass, HashSet<string>>();

            var classes = package.QueryPackages().SelectMany(x => x.PackagedElement.OfType<IClass>()).ToList();

            foreach (var @class in classes)
            {
                var propertyVariations = new HashSet<string>();

                foreach (var property in @class.OwnedAttribute)
                {
                    if (property.QueryIsReferenceProperty())
                    {
                        var referenceType = property.IsComposite ? $"REF:{property.Lower}:{property.Upper}:containment" : $"REF:{property.Lower}:{property.Upper}";

                        if (property.QueryIsMemberOfManyToMany())
                        {
                            referenceType = $"{referenceType}:Many-to-Many";
                        }

                        if (property.SubsettedProperty.Any())
                        {
                            referenceType = $"{referenceType}:subsetted";
                        }

                        if (property.IsDerived)
                        {
                            referenceType = $"{referenceType}:isDerived";
                        }

                        if (property.QueryIsRedefined())
                        {
                            referenceType = $"{referenceType}:IsRedefined";
                        }

                        if (property.Opposite != null && property.Opposite.IsComposite)
                        {
                            referenceType = $"{referenceType}:Contained";
                        }

                        propertyVariations.Add(referenceType);
                    }

                    if (property.QueryIsValueProperty())
                    {
                        if (property.QueryIsEnum())
                        {
                            var enumeration = $"ENUM:{property.Lower}:{property.Upper}";

                            if (property.SubsettedProperty.Any())
                            {
                                enumeration = $"{enumeration}:subsetted";
                            }

                            if (property.IsDerived)
                            {
                                enumeration = $"{enumeration}:isDerived";
                            }

                            if (property.QueryIsRedefined())
                            {
                                enumeration = $"{enumeration}:IsRedefined";
                            }

                            propertyVariations.Add(enumeration);
                        }
                        else
                        {
                            var valueType = $"VALUE:{property.QueryTypeName()}:{property.Lower}:{property.Upper}";

                            if (property.SubsettedProperty.Any())
                            {
                                valueType = $"{valueType}:subsetted";
                            }

                            if (property.IsDerived)
                            {
                                valueType = $"{valueType}:isDerived";
                            }

                            if (property.QueryIsRedefined())
                            {
                                valueType = $"{valueType}:IsRedefined";
                            }

                            propertyVariations.Add(valueType);
                        }
                    }
                }

                classPropertyVariations.Add(@class, propertyVariations);
            }

            return classPropertyVariations;
        }

        /// <summary>
        /// Reduces the <see cref="IClass"/>> and property variations in a greedy fashion such
        /// that the least amount of classes is returned
        /// </summary>
        /// <param name="classPropertyVariations">
        /// The <see cref="IClass"/>> and property variations in a greedy fashion such that needs to
        /// be reduced.
        /// </param>
        /// <returns>
        /// a reduced set of <see cref="IClass"/> and <see cref="IProperty"/> variations.
        /// </returns>
        private IReadOnlyList<IClass> ReduceClassPropertyVariationToInterestingClasses(Dictionary<IClass, HashSet<string>> classPropertyVariations)
        {
            var dictionaryClone = new Dictionary<IClass, HashSet<string>>(classPropertyVariations);

            // Step 2: Get all unique property variations
            var propertyVariations = dictionaryClone.Values.SelectMany(p => p).ToList();

            var uniquePropertyVariations = new HashSet<string>(propertyVariations);

            // Step 3: Greedy algorithm to cover all property variations with the fewest classes
            var result = new List<IClass>();
            var covered = new HashSet<string>();

            while (covered.Count < uniquePropertyVariations.Count)
            {
                // Pick the class that contributes the most uncovered properties
                var bestClass = dictionaryClone
                    .OrderByDescending(kvp => kvp.Value.Count(p => !covered.Contains(p)))
                    .First().Key;

                result.Add(bestClass);

                foreach (var prop in dictionaryClone[bestClass])
                    covered.Add(prop);

                dictionaryClone.Remove(bestClass); // avoid reusing the same class
            }

            return result;
        }

        /// <summary>
        /// Inspect the content of the provided <see cref="IPackage"/> and returns a
        /// read-only collection of interesting <see cref="IClass"/>
        /// </summary>
        /// <param name="package">
        /// The <see cref="IPackage"/> that needs to be inspected
        /// </param>
        /// <returns>
        /// A read-only collection of interesting <see cref="IClass"/> that cover the variations
        /// of <see cref="IProperty"/>> and <see cref="IOperation"/> variations
        /// </returns>
        public IReadOnlyCollection<IClass> QueryInterestingClasses(IPackage package)
        {
            if (package == null)
            {
                throw new ArgumentNullException(nameof(package));
            }

            // Step 1: Map class to property variations
            var classPropertyVariations = this.MapClassPropertyVariation(package);

            // Step 2: Greedy algorithm to cover all property variations with the fewest classes
            var result = this.ReduceClassPropertyVariationToInterestingClasses(classPropertyVariations)
                .OrderBy(x => x.Name).ToList();

            return result;
        }

        /// <summary>
        /// Inspect the provided <see cref="IClass"/> (by name) that is contained in the <see cref="IPackage"/>
        /// and returns the variation of data-types, enumerations and multiplicity as an Analysis report
        /// </summary>
        /// <param name="package">
        /// The <see cref="IPackage"/> that contains the <see cref="IClass"/> that
        /// is to be inspected
        /// </param>
        /// <param name="className">
        /// the name of the class that is to be inspected
        /// </param>
        /// <returns>
        /// returns a report detailing the various combinations of properties of the provided class
        /// </returns>
        public string Inspect(IPackage package, string className)
        {
            if (package == null)
            {
                throw new ArgumentNullException(nameof(package));
            }

            if (className == null)
            {
                throw new ArgumentNullException(nameof(className));
            }

            if (className.Length == 0)
            {
                throw new ArgumentException(nameof(className));
            }

            this.logger.LogInformation("Start UML named Class '{2}' Inspection at Package {0}:{1}", package.XmiId, package.Name, className);

            var sw = Stopwatch.StartNew();

            var sb = new StringBuilder();

            var @class = package.PackagedElement.OfType<IClass>().Single(x => x.Name == className);

            sb.AppendLine($"{package.Name}.{@class.Name}:");
            sb.AppendLine("----------------------------------");

            foreach (var property in @class.OwnedAttribute.OrderBy(x => x.Name))
            {
                if (property.IsDerived)
                {
                    continue;
                }

                if (property.QueryIsReferenceProperty())
                {
                    string referenceType;

                    if (property.IsComposite)
                    {
                        referenceType = $"{property.Name}:{property.QueryTypeName()} [{property.Lower}..{property.Upper}] - CONTAINED REFERENCE TYPE";
                    }
                    else
                    {
                        if (property.QueryIsMemberOfManyToMany())
                        {
                            referenceType = $"{property.Name}:{property.QueryTypeName()} [{property.Lower}..{property.Upper}] - REFERENCE TYPE - MANY-TO-MANY";
                        }
                        else
                        {
                            referenceType = $"{property.Name}:{property.QueryTypeName()} [{property.Lower}..{property.Upper}] - REFERENCE TYPE";
                        }
                    }

                    sb.AppendLine(referenceType);
                }

                if (property.QueryIsValueProperty())
                {
                    this.logger.LogInformation(property.Name);

                    if (property.QueryIsEnum())
                    {
                        var enumeration = $"{property.Name}:{property.QueryTypeName()} [{property.Lower}..{property.Upper}] - ENUM TYPE";
                        sb.AppendLine(enumeration);
                    }
                    else
                    {
                        var valueType = $"{property.Name}:{property.QueryTypeName()} [{property.Lower}..{property.Upper}] - VALUETYPE";
                        sb.AppendLine(valueType);
                    }
                }
            }

            sb.AppendLine("-DERIVED--------------------------");
            foreach (var property in @class.OwnedAttribute.OrderBy(x => x.Name))
            {
                if (property.IsDerived)
                {
                    if (property.QueryIsReferenceProperty())
                    {
                        if (property.QueryIsMemberOfManyToMany())
                        {
                            var referenceType = $"{property.Name}:{property.QueryTypeName()} [{property.Lower}..{property.Upper}] - REFERENCE TYPE - MANY-TO-MANY";
                            sb.AppendLine(referenceType);
                        }
                        else
                        {
                            var referenceType = $"{property.Name}:{property.QueryTypeName()} [{property.Lower}..{property.Upper}] - REFERENCE TYPE";
                            sb.AppendLine(referenceType);
                        }
                    }

                    if (property.QueryIsValueProperty())
                    {
                        if (property.QueryIsEnum())
                        {
                            var enumeration = $"{property.Name}:{property.QueryTypeName()} [{property.Lower}..{property.Upper}] - ENUM TYPE";
                            sb.AppendLine(enumeration);
                        }
                        else
                        {
                            var valueType = $"{property.Name} : {property.QueryTypeName()} [{property.Lower} .. {property.Upper}] - VALUETYPE";
                            sb.AppendLine(valueType);
                        }
                    }
                }
            }

            this.logger.LogInformation("UML named Class '{2}' Inspection at Package {0}:{1} finished in {3} [ms]", package.XmiId, package.Name, className, sw.ElapsedMilliseconds);

            return sb.ToString();
        }

        /// <summary>
        /// Recursively analyzes the documentation of the model and prints the names of all classes 
        /// and features that do not have any documentation in an analysis report
        /// </summary>
        /// <param name="package">
        /// The <see cref="IPackage"/> which needs to be inspected
        /// </param>
        /// <param name="recursive">
        /// A value indicating whether the sub <see cref="IPackage"/>s need to be Analyzed as well
        /// </param>
        /// <returns>
        /// returns a report of the classes and properties that do not contain any documentation
        /// </returns>
        public string AnalyzeDocumentation(IPackage package)
        {
            if (package == null)
            {
                throw new ArgumentNullException(nameof(package));
            }

            this.logger.LogInformation("Start inspection of Package documentation {0}:{1}", package.XmiId, package.Name);

            var sw = Stopwatch.StartNew();

            var sb = new StringBuilder();

            sb.AppendLine("----- MISSING DOCUMENTATION ANALYSIS ------");
            sb.AppendLine("");
            sb.AppendLine("---------- Package.Class:Property ---------");
            sb.AppendLine("");

            this.AnalyzeDocumentation(package, sb);

            sb.AppendLine("");

            this.logger.LogInformation("Inspection of Package documentation {0}:{1} finished in {3} [ms]", package.XmiId, package.Name, sw.ElapsedMilliseconds);

            return sb.ToString();
        }

        /// <summary>
        /// Recursively analyzes the documentation of the model and adds the result to the provided
        /// <see cref="StringBuilder"/>
        /// </summary>
        /// <param name="package">
        /// The <see cref="IPackage"/> which needs to be inspected
        /// </param>
        /// <param name="sb">
        /// The <see cref="StringBuilder"/> to which the analysis results are written
        /// </param>
        /// <param name="recursive">
        /// A value indicating whether the sub <see cref="IPackage"/>s need to be Analyzed as well
        /// </param>
        private void AnalyzeDocumentation(IPackage package, StringBuilder sb)
        {
            var classes = package.QueryPackages().SelectMany(x => x.PackagedElement.OfType<IClass>()).OrderBy(x => x.Name).ToList();

            foreach (var @class in classes)
            {
                if (string.IsNullOrEmpty(@class.QueryRawDocumentation()))
                {
                    sb.AppendLine($"{package.Name}.{@class.Name}");
                }

                foreach (var property in @class.OwnedAttribute.OrderBy(x => x.Name))
                {
                    if (string.IsNullOrEmpty(property.QueryRawDocumentation()))
                    {
                        sb.AppendLine($"{package.Name}.{@class.Name}:{property.Name}");
                    }
                }
            }
        }

        /// <summary>
        /// Verifies whether the extension of the <paramref name="outputPath"/> is valid or not
        /// </summary>
        /// <param name="outputPath">
        /// The subject <see cref="FileInfo"/> to check
        /// </param>
        /// <returns>
        /// A Tuple of bool and string, where the string contains a description of the verification.
        /// Either stating that the extension is valid or not.
        /// </returns>
        public override Tuple<bool, string> IsValidReportExtension(FileInfo outputPath)
        {
            if (outputPath == null)
            {
                throw new ArgumentNullException(nameof(outputPath));
            }

            if (outputPath.Extension == ".txt")
            {
                return new Tuple<bool, string>(true, ".txt is a supported report extension");
            }

            return new Tuple<bool, string>(false,
                $"The Extension of the output file '{outputPath.Extension}' is not supported. Supported extensions is '.txt'");
        }

        /// <summary>
        /// Generates a table that contains all classes, attributes and their documentation
        /// </summary>
        /// <param name="modelPath">
        /// the path to the UML model of which the report is to be generated.
        /// </param>
        /// <param name="rootDirectory">
        /// The base directory path used as the local root for resolving referenced XMI files.
        /// </param>
        /// <param name="useStrictReading">
        /// A value indicating whether to use strict reading. When Strict Reading is set to true the
        /// reader will throw an exception if it encounters an unknown element or attribute.
        /// Otherwise, it will ignore the unknown element or attribute and log a warning.
        /// </param>
        /// <param name="pathMap">
        /// a dictionary of key-value pairs used to map PATHMAP references to local xmi files
        /// </param>
        /// <param name="outputPath">
        /// the path, including filename, where the output is to be generated.
        /// </param>
        public void GenerateReport(FileInfo modelPath, DirectoryInfo rootDirectory, bool useStrictReading, Dictionary<string, string> pathMap, FileInfo outputPath)
        {
            if (modelPath == null)
            {
                throw new ArgumentNullException(nameof(modelPath));
            }
            
            if (outputPath == null)
            {
                throw new ArgumentNullException(nameof(outputPath));
            }

            var sw = Stopwatch.StartNew();

            this.logger.LogInformation("Start Generating Inspection Report");

            var xmiReaderResult = this.LoadPackages(modelPath, rootDirectory, useStrictReading, pathMap);
            
            var result = new StringBuilder();

            result.Append(this.ReportHeader());

            foreach (var package in xmiReaderResult.Packages)
            {
                result.Append(this.Inspect(package));
                result.AppendLine();
                result.Append(this.AnalyzeDocumentation(package));
            }

            if (outputPath.Exists)
            {
                outputPath.Delete();
            }

            using var writer = outputPath.CreateText();
            writer.Write(result);

            this.logger.LogInformation("Generated inspection report in {0} [ms]", sw.ElapsedMilliseconds);
        }

        /// <summary>
        /// Generates the report header that is the first part of the text report
        /// </summary>
        /// <returns>
        /// a string containing the header information
        /// </returns>
        private string ReportHeader()
        {
            this.logger.LogDebug("Generate report header");

            var header = new StringBuilder();

            header.AppendLine("The purpose of this report is to provide an overview of the");
            header.AppendLine("contents of a UML model.");
            header.AppendLine("");
            header.AppendLine("1. This report shows the variation of value-types, reference-types");
            header.AppendLine("   and enumerations.");
            header.AppendLine("2. The report provides an overview of the variation of");
            header.AppendLine("   used multiplicities.");
            header.AppendLine("3. The report provides an overview of the variation of");
            header.AppendLine("   used subsetted and redefined properties.");
            header.AppendLine("4. The report shows an overview of interesting classes.");
            header.AppendLine("   Interesting classes are those classes that should be used");
            header.AppendLine("   when writing unit tests for code generation. By writing");
            header.AppendLine("   tests for these classes all variations of types and multiplicities");
            header.AppendLine("   are covered.");
            header.AppendLine("5. The report lists each class and property that does not contain");
            header.AppendLine("   any documentation.");
            header.AppendLine("");
            header.AppendLine($"Inspection Report generated on {DateTime.Now:f}");
            header.AppendLine("");

            return header.ToString();
        }
    }
}
