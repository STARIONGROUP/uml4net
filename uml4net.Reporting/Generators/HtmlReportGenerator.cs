// -------------------------------------------------------------------------------------------------
//  <copyright file="HtmlReportGenerator.cs" company="Starion Group S.A.">
// 
//    Copyright 2019-2025 Starion Group S.A.
// 
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
// 
//        http://www.apache.org/licenses/LICENSE-2.0
// 
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
// 
//  </copyright>
//  ------------------------------------------------------------------------------------------------

namespace uml4net.Reporting.Generators
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;

    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.Logging.Abstractions;

    using uml4net.HandleBars;

    using DocumentationHelper = uml4net.Reporting.Helpers.DocumentationHelper;

    /// <summary>
    /// The purpose of the <see cref="HtmlReportGenerator" /> is to generate an HTML report of a
    /// UML Model
    /// </summary>
    public class HtmlReportGenerator : HandleBarsReportGenerator, IHtmlReportGenerator
    {
        /// <summary>
        /// The <see cref="ILogger" /> used to log
        /// </summary>
        private readonly ILogger<HtmlReportGenerator> logger;

        /// <summary>
        /// Initializes a new instance of the <see cref="HtmlReportGenerator" /> class.
        /// </summary>
        /// <param name="loggerFactory">
        /// The (injected) <see cref="ILoggerFactory" /> used to set up logging
        /// </param>
        public HtmlReportGenerator(ILoggerFactory loggerFactory = null) : base(loggerFactory)
        {
            this.logger = loggerFactory == null ? NullLogger<HtmlReportGenerator>.Instance : loggerFactory.CreateLogger<HtmlReportGenerator>();
        }

        /// <summary>
        /// Queries the name of the report type that is generated by the current <see cref="IReportGenerator" />
        /// </summary>
        /// <returns>
        /// human-readable name of the report type
        /// </returns>
        public string QueryReportType()
        {
            return "html";
        }

        /// <summary>
        /// Generates a table that contains all classes, attributes and their documentation
        /// </summary>
        /// <param name="modelPath">
        /// the path to the UML model of which the report is to be generated.
        /// </param>
        /// <param name="rootDirectory">
        /// The base directory path used as the local root for resolving referenced XMI files.
        /// </param>
        /// <param name="useStrictReading">
        /// A value indicating whether to use strict reading. When Strict Reading is set to true the
        /// reader will throw an exception if it encounters an unknown element or attribute.
        /// Otherwise, it will ignore the unknown element or attribute and log a warning.
        /// </param>
        /// <param name="pathMap">
        /// a dictionary of key-value pairs used to map PATHMAP references to local xmi files
        /// </param>
        /// <returns>
        /// the content of an HTML report in a string
        /// </returns>
        public string GenerateReport(FileInfo modelPath, DirectoryInfo rootDirectory, bool useStrictReading, Dictionary<string, string> pathMap)
        {
            if (modelPath == null)
            {
                throw new ArgumentNullException(nameof(modelPath));
            }

            if (rootDirectory == null)
            {
                throw new ArgumentNullException(nameof(rootDirectory));
            }

            this.OverrideHelpers();

            var sw = Stopwatch.StartNew();

            this.logger.LogInformation("Start Generating HTML report tables");

            var template = this.Templates["uml-to-html-docs"];

            var xmiReaderResult = this.LoadPackages(modelPath, rootDirectory, useStrictReading, pathMap);

            var payload = CreateHandlebarsPayload(xmiReaderResult);

            var generatedHtml = template(payload);

            this.logger.LogInformation("Generated HTML report in {ElapsedTime} [ms]", sw.ElapsedMilliseconds);

            return generatedHtml;
        }

        /// <summary>
        /// Generates a table that contains all classes, attributes and their documentation
        /// </summary>
        /// <param name="modelPath">
        /// the path to the UML model of which the report is to be generated.
        /// </param>
        /// <param name="rootDirectory">
        /// The base directory path used as the local root for resolving referenced XMI files.
        /// </param>
        /// <param name="useStrictReading">
        /// A value indicating whether to use strict reading. When Strict Reading is set to true the
        /// reader will throw an exception if it encounters an unknown element or attribute.
        /// Otherwise, it will ignore the unknown element or attribute and log a warning.
        /// </param>
        /// <param name="pathMap">
        /// a dictionary of key-value pairs used to map PATHMAP references to local xmi files
        /// </param>
        /// <param name="outputPath">
        /// the path, including filename, where the output is to be generated.
        /// </param>
        public void GenerateReport(FileInfo modelPath, DirectoryInfo rootDirectory, bool useStrictReading, Dictionary<string, string> pathMap, FileInfo outputPath)
        {
            if (modelPath == null)
            {
                throw new ArgumentNullException(nameof(modelPath));
            }

            if (outputPath == null)
            {
                throw new ArgumentNullException(nameof(outputPath));
            }

            this.OverrideHelpers();

            var sw = Stopwatch.StartNew();

            var generatedHtml = this.GenerateReport(modelPath, rootDirectory, useStrictReading, pathMap);

            if (outputPath.Exists)
            {
                outputPath.Delete();
            }

            using var writer = outputPath.CreateText();
            writer.Write(generatedHtml);

            this.logger.LogInformation("Generated and saved HTML report in {ElapsedTime} [ms]", sw.ElapsedMilliseconds);
        }

        /// <summary>
        /// Verifies whether the extension of the <paramref name="outputPath" /> is valid or not
        /// </summary>
        /// <param name="outputPath">
        /// The subject <see cref="FileInfo" /> to check
        /// </param>
        /// <returns>
        /// A Tuple of bool and string, where the string contains a description of the verification.
        /// Either stating that the extension is valid or not.
        /// </returns>
        public override Tuple<bool, string> IsValidReportExtension(FileInfo outputPath)
        {
            if (outputPath == null)
            {
                throw new ArgumentNullException(nameof(outputPath));
            }

            if (outputPath.Extension == ".html")
            {
                return new Tuple<bool, string>(true, ".html is a supported report extension");
            }

            return new Tuple<bool, string>(false,
                $"The Extension of the output file '{outputPath.Extension}' is not supported. Supported extensions is '.html'");
        }

        /// <summary>
        /// Register the code templates
        /// </summary>
        protected override void RegisterTemplates()
        {
            this.RegisterEmbeddedTemplate("uml-to-html-docs");
        }

        /// <summary>
        /// Register the custom helpers
        /// </summary>
        protected override void RegisterHelpers()
        {
            StringHelper.RegisterStringHelper(this.Handlebars);
            IEnumerableHelper.RegisterEnumerableHelper(this.Handlebars);
            ClassHelper.RegisterClassHelper(this.Handlebars);
            PropertyHelper.RegisterPropertyHelper(this.Handlebars);
            GeneralizationHelper.RegisterGeneralizationHelper(this.Handlebars);

            if (this.ShouldUseEnterpriseArchitectReader)
            {
                DocumentationHelper.RegisterDocumentationHelper(this.Handlebars);
            }
            else
            {
                HandleBars.DocumentationHelper.RegisterDocumentationHelper(this.Handlebars);
            }
        }

        /// <summary>
        /// Overrides handlebars helper to allow registering correct documentation helper in case of EA reader
        /// </summary>
        private void OverrideHelpers()
        {
            this.Handlebars.GetHelpers().Clear();
            this.RegisterHelpers();
        }
    }
}
